#!/usr/bin/env python3
"""
Vietnam Electronics Data Collector
Thu th·∫≠p d·ªØ li·ªáu s·∫£n ph·∫©m ƒëi·ªán t·ª≠ t·ª´ c√°c platform TMƒêT Vi·ªát Nam
"""

import requests
import pandas as pd
import json
import time
import random
from datetime import datetime
from pathlib import Path
import logging
from fake_useragent import UserAgent
import urllib.parse

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class VietnamElectronicsCollector:
    def __init__(self):
        self.ua = UserAgent()
        self.session = requests.Session()
        self.output_dir = Path("data/vietnam_electronics_fresh")
        self.output_dir.mkdir(exist_ok=True, parents=True)

        # Headers c∆° b·∫£n
        self.headers = {
            'User-Agent': self.ua.random,
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'vi-VN,vi;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }

        # C·∫•u h√¨nh c√°c platform Vi·ªát Nam
        self.platforms = {
            'tiki': {
                'name': 'Tiki Vietnam',
                'base_url': 'https://tiki.vn',
                'api_url': 'https://tiki.vn/api/personalish/v1/blocks/listings',
                'categories': {
                    'smartphones': '1795',
                    'laptops': '1846',
                    'tablets': '1794',
                    'audio': '1815',
                    'cameras': '1801'
                }
            },
            'fptshop': {
                'name': 'FPT Shop',
                'base_url': 'https://fptshop.com.vn',
                'categories': [
                    'dien-thoai',
                    'laptop',
                    'tablet',
                    'am-thanh',
                    'camera'
                ]
            },
            'cellphones': {
                'name': 'CellphoneS',
                'base_url': 'https://cellphones.com.vn',
                'categories': [
                    'mobile',
                    'tablet',
                    'laptop',
                    'audio',
                    'accessories'
                ]
            }
        }

        # T·ª´ kh√≥a ƒëi·ªán t·ª≠ Vi·ªát Nam
        self.electronics_keywords = [
            'ƒëi·ªán tho·∫°i', 'smartphone', 'iPhone', 'Samsung', 'Xiaomi', 'Oppo', 'Vivo',
            'laptop', 'm√°y t√≠nh', 'Dell', 'HP', 'Asus', 'Acer', 'Lenovo',
            'tablet', 'iPad', 'm√°y t√≠nh b·∫£ng',
            'tai nghe', 'headphone', 'loa', 'speaker', '√¢m thanh',
            'camera', 'm√°y ·∫£nh', 'Canon', 'Sony', 'Nikon',
            'smartwatch', 'ƒë·ªìng h·ªì th√¥ng minh', 'Apple Watch',
            's·∫°c d·ª± ph√≤ng', 'pin s·∫°c', 'powerbank'
        ]

    def delay_request(self, min_delay=1, max_delay=3):
        """Random delay gi·ªØa c√°c request"""
        delay = random.uniform(min_delay, max_delay)
        time.sleep(delay)

    def collect_from_tiki(self, category='smartphones', limit=50):
        """Thu th·∫≠p d·ªØ li·ªáu t·ª´ Tiki"""
        logger.info(f"üõí Thu th·∫≠p t·ª´ Tiki - Category: {category}")

        try:
            products = []
            category_id = self.platforms['tiki']['categories'].get(category, '1795')

            # Tiki API parameters
            params = {
                'limit': 20,
                'include': 'advertisement',
                'aggregations': 2,
                'version': 'home-persionalized',
                'trackity_id': f"category_{category_id}",
                'category': category_id,
                'page': 1,
                'urlKey': category
            }

            pages_to_collect = min(5, (limit // 20) + 1)

            for page in range(1, pages_to_collect + 1):
                params['page'] = page

                try:
                    response = self.session.get(
                        self.platforms['tiki']['api_url'],
                        headers=self.headers,
                        params=params,
                        timeout=15
                    )

                    if response.status_code == 200:
                        data = response.json()

                        if 'data' in data:
                            for item in data['data'][:20]:  # Limit per page
                                try:
                                    product = self._parse_tiki_product(item)
                                    if product:
                                        products.append(product)
                                        if len(products) >= limit:
                                            break
                                except Exception as e:
                                    logger.warning(f"L·ªói parse s·∫£n ph·∫©m Tiki: {e}")
                                    continue

                        logger.info(f"üì± Tiki page {page}: {len(products)} products collected")

                        if len(products) >= limit:
                            break

                    else:
                        logger.warning(f"Tiki API error: {response.status_code}")
                        break

                except Exception as e:
                    logger.error(f"L·ªói request Tiki page {page}: {e}")
                    continue

                self.delay_request(2, 4)

            return products[:limit]

        except Exception as e:
            logger.error(f"L·ªói thu th·∫≠p t·ª´ Tiki: {e}")
            return []

    def _parse_tiki_product(self, item):
        """Parse s·∫£n ph·∫©m t·ª´ Tiki API response"""
        try:
            return {
                'id': f"TIKI_{item.get('id', '')}",
                'name': item.get('name', '').strip(),
                'brand': item.get('brand_name', 'Unknown'),
                'price_vnd': item.get('price', 0),
                'original_price_vnd': item.get('list_price', 0),
                'discount_percentage': item.get('discount_rate', 0),
                'rating': item.get('rating_average', 0),
                'review_count': item.get('review_count', 0),
                'thumbnail': item.get('thumbnail_url', ''),
                'url': f"https://tiki.vn/{item.get('url_key', '')}-p{item.get('id', '')}.html",
                'category': 'Electronics',
                'subcategory': item.get('categories', {}).get('name', 'Unknown'),
                'platform': 'Tiki',
                'stock_quantity': item.get('qty_sold', 0),
                'description': item.get('short_description', ''),
                'collected_at': datetime.now().isoformat(),
                'source': 'Vietnam_Electronics_Collector',
                'country': 'Vietnam'
            }
        except Exception as e:
            logger.warning(f"L·ªói parse Tiki product: {e}")
            return None

    def collect_from_dummy_apis(self, category='electronics', limit=30):
        """Thu th·∫≠p t·ª´ c√°c API demo/dummy"""
        logger.info(f"üåê Thu th·∫≠p t·ª´ API demo - Category: {category}")

        try:
            products = []

            # DummyJSON Electronics
            dummy_url = f"https://dummyjson.com/products/category/{category}"
            try:
                response = self.session.get(dummy_url, headers=self.headers, timeout=15)
                if response.status_code == 200:
                    data = response.json()

                    for item in data.get('products', []):
                        product = self._parse_dummy_product(item)
                        if product:
                            products.append(product)

                    logger.info(f"üì¶ DummyJSON: {len(products)} products")

            except Exception as e:
                logger.warning(f"L·ªói DummyJSON: {e}")

            # Fake Store API
            try:
                fake_store_url = "https://fakestoreapi.com/products/category/electronics"
                response = self.session.get(fake_store_url, headers=self.headers, timeout=15)

                if response.status_code == 200:
                    items = response.json()

                    for item in items:
                        product = self._parse_fake_store_product(item)
                        if product:
                            products.append(product)

                    logger.info(f"üè™ FakeStore: {len(products)} products total")

            except Exception as e:
                logger.warning(f"L·ªói FakeStore API: {e}")

            return products[:limit]

        except Exception as e:
            logger.error(f"L·ªói thu th·∫≠p t·ª´ APIs: {e}")
            return []

    def _parse_dummy_product(self, item):
        """Parse s·∫£n ph·∫©m t·ª´ DummyJSON"""
        try:
            # Chuy·ªÉn ƒë·ªïi gi√° USD sang VND (t·ª∑ gi√° ~24,000)
            price_usd = item.get('price', 0)
            price_vnd = price_usd * 24000

            return {
                'id': f"DUMMY_{item.get('id', '')}",
                'name': item.get('title', '').strip(),
                'brand': item.get('brand', 'Unknown'),
                'price_vnd': price_vnd,
                'price_usd': price_usd,
                'discount_percentage': item.get('discountPercentage', 0),
                'rating': item.get('rating', 0),
                'review_count': random.randint(10, 500),  # Gi·∫£ l·∫≠p
                'thumbnail': item.get('thumbnail', ''),
                'images': item.get('images', []),
                'category': 'Electronics',
                'subcategory': item.get('category', 'electronics'),
                'platform': 'DummyJSON',
                'stock_quantity': item.get('stock', 0),
                'description': item.get('description', ''),
                'collected_at': datetime.now().isoformat(),
                'source': 'Vietnam_Electronics_Collector',
                'country': 'Global_Localized_VN'
            }
        except Exception as e:
            logger.warning(f"L·ªói parse Dummy product: {e}")
            return None

    def _parse_fake_store_product(self, item):
        """Parse s·∫£n ph·∫©m t·ª´ FakeStore API"""
        try:
            price_usd = item.get('price', 0)
            price_vnd = price_usd * 24000

            return {
                'id': f"FAKE_{item.get('id', '')}",
                'name': item.get('title', '').strip(),
                'brand': 'Generic',
                'price_vnd': price_vnd,
                'price_usd': price_usd,
                'rating': item.get('rating', {}).get('rate', 0),
                'review_count': item.get('rating', {}).get('count', 0),
                'thumbnail': item.get('image', ''),
                'category': 'Electronics',
                'subcategory': item.get('category', 'electronics'),
                'platform': 'FakeStore',
                'description': item.get('description', ''),
                'collected_at': datetime.now().isoformat(),
                'source': 'Vietnam_Electronics_Collector',
                'country': 'Global_Localized_VN'
            }
        except Exception as e:
            logger.warning(f"L·ªói parse FakeStore product: {e}")
            return None

    def generate_synthetic_vietnam_electronics(self, count=100):
        """T·∫°o d·ªØ li·ªáu ƒëi·ªán t·ª≠ Vi·ªát Nam synthetic"""
        logger.info(f"üé≤ T·∫°o {count} s·∫£n ph·∫©m ƒëi·ªán t·ª≠ VN synthetic")

        try:
            # D·ªØ li·ªáu base cho Vi·ªát Nam
            vn_brands = ['Samsung', 'Xiaomi', 'Oppo', 'Vivo', 'iPhone', 'Huawei', 'Realme', 'Nokia']
            vn_categories = {
                'Smartphones': ['Galaxy', 'iPhone', 'Mi', 'Redmi', 'A-series', 'Y-series'],
                'Laptops': ['Thinkpad', 'Vivobook', 'Inspiron', 'Pavilion', 'Ideapad'],
                'Tablets': ['iPad', 'Galaxy Tab', 'Xiaomi Pad', 'Huawei MatePad'],
                'Audio': ['AirPods', 'Galaxy Buds', 'Mi Earbuds', 'Sony WH', 'JBL'],
                'Cameras': ['EOS', 'Alpha', 'Lumix', 'Coolpix', 'PowerShot']
            }

            vn_platforms = ['Shopee', 'Lazada', 'Tiki', 'Sendo', 'FPT Shop', 'CellphoneS']
            vn_payment_methods = ['COD', 'MoMo', 'ZaloPay', 'VNPay', 'Bank Transfer', 'Credit Card']

            synthetic_products = []

            for i in range(count):
                category = random.choice(list(vn_categories.keys()))
                brand = random.choice(vn_brands)
                model = random.choice(vn_categories[category])

                # T·∫°o t√™n s·∫£n ph·∫©m
                name = f"{brand} {model} {random.choice(['Pro', 'Plus', 'Ultra', 'Standard', 'Lite'])}"

                # Gi√° theo th·ªã tr∆∞·ªùng VN
                if category == 'Smartphones':
                    base_price = random.uniform(3000000, 30000000)  # 3-30 tri·ªáu VND
                elif category == 'Laptops':
                    base_price = random.uniform(8000000, 50000000)  # 8-50 tri·ªáu VND
                elif category == 'Tablets':
                    base_price = random.uniform(2000000, 20000000)  # 2-20 tri·ªáu VND
                elif category == 'Audio':
                    base_price = random.uniform(500000, 8000000)   # 0.5-8 tri·ªáu VND
                else:
                    base_price = random.uniform(5000000, 40000000)  # 5-40 tri·ªáu VND

                discount = random.uniform(0, 30)
                final_price = base_price * (1 - discount/100)

                product = {
                    'id': f'VN_SYNTH_{i+1:06d}',
                    'name': name,
                    'brand': brand,
                    'category': 'Electronics',
                    'subcategory': category,
                    'price_vnd': round(final_price),
                    'original_price_vnd': round(base_price),
                    'discount_percentage': round(discount, 1),
                    'rating': round(random.uniform(3.5, 5.0), 1),
                    'review_count': random.randint(50, 2000),
                    'stock_quantity': random.randint(10, 500),
                    'warranty_months': random.choice([6, 12, 18, 24, 36]),
                    'platform': random.choice(vn_platforms),
                    'payment_methods': random.sample(vn_payment_methods, k=random.randint(3, 5)),
                    'description': f'S·∫£n ph·∫©m {category.lower()} ch·∫•t l∆∞·ª£ng cao ph·ªï bi·∫øn t·∫°i th·ªã tr∆∞·ªùng Vi·ªát Nam',
                    'market_focus': 'Vietnam',
                    'country': 'Vietnam',
                    'language': 'Vietnamese',
                    'collected_at': datetime.now().isoformat(),
                    'source': 'Vietnam_Synthetic_Generator',
                    'data_type': 'synthetic'
                }

                synthetic_products.append(product)

            logger.info(f"‚úÖ ƒê√£ t·∫°o {len(synthetic_products)} s·∫£n ph·∫©m synthetic")
            return synthetic_products

        except Exception as e:
            logger.error(f"L·ªói t·∫°o synthetic data: {e}")
            return []

    def collect_all_electronics(self):
        """Thu th·∫≠p t·∫•t c·∫£ d·ªØ li·ªáu ƒëi·ªán t·ª≠ t·ª´ m·ªçi ngu·ªìn"""
        logger.info("üöÄ B·∫Øt ƒë·∫ßu thu th·∫≠p to√†n b·ªô d·ªØ li·ªáu ƒëi·ªán t·ª≠ Vi·ªát Nam")

        all_products = []

        try:
            # 1. Thu th·∫≠p t·ª´ Tiki
            tiki_categories = ['smartphones', 'laptops', 'tablets', 'audio']
            for category in tiki_categories:
                products = self.collect_from_tiki(category, limit=30)
                all_products.extend(products)
                logger.info(f"‚úÖ Tiki {category}: {len(products)} products")
                self.delay_request(3, 5)

            # 2. Thu th·∫≠p t·ª´ Demo APIs
            api_products = self.collect_from_dummy_apis(limit=50)
            all_products.extend(api_products)
            logger.info(f"‚úÖ Demo APIs: {len(api_products)} products")

            # 3. T·∫°o synthetic data
            synthetic_products = self.generate_synthetic_vietnam_electronics(count=200)
            all_products.extend(synthetic_products)
            logger.info(f"‚úÖ Synthetic: {len(synthetic_products)} products")

            # 4. L∆∞u d·ªØ li·ªáu
            if all_products:
                df = pd.DataFrame(all_products)

                # L√†m s·∫°ch d·ªØ li·ªáu
                df = self._clean_collected_data(df)

                # L∆∞u file
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                output_file = self.output_dir / f'vietnam_electronics_fresh_{timestamp}.csv'
                df.to_csv(output_file, index=False, encoding='utf-8')

                # L∆∞u summary
                summary = self._create_collection_summary(df)
                summary_file = self.output_dir / f'collection_summary_{timestamp}.json'
                with open(summary_file, 'w', encoding='utf-8') as f:
                    json.dump(summary, f, ensure_ascii=False, indent=2)

                logger.info(f"üíæ ƒê√£ l∆∞u {len(df)} s·∫£n ph·∫©m t·∫°i: {output_file}")
                logger.info(f"üìä Summary: {summary_file}")

                return df, summary
            else:
                logger.warning("‚ö†Ô∏è Kh√¥ng thu th·∫≠p ƒë∆∞·ª£c d·ªØ li·ªáu n√†o!")
                return None, None

        except Exception as e:
            logger.error(f"‚ùå L·ªói trong qu√° tr√¨nh thu th·∫≠p: {e}")
            return None, None

    def _clean_collected_data(self, df):
        """L√†m s·∫°ch d·ªØ li·ªáu ƒë√£ thu th·∫≠p"""
        logger.info("üßΩ L√†m s·∫°ch d·ªØ li·ªáu thu th·∫≠p...")

        # X√≥a duplicates
        initial_count = len(df)
        df = df.drop_duplicates(subset=['name', 'brand'], keep='first')

        # Chu·∫©n h√≥a d·ªØ li·ªáu
        df['name'] = df['name'].str.strip()
        df['brand'] = df['brand'].fillna('Unknown')
        df['price_vnd'] = pd.to_numeric(df['price_vnd'], errors='coerce').fillna(0)

        logger.info(f"‚úÖ L√†m s·∫°ch: {initial_count} ‚Üí {len(df)} products")
        return df

    def _create_collection_summary(self, df):
        """T·∫°o b√°o c√°o t·ªïng h·ª£p thu th·∫≠p"""
        return {
            'collection_timestamp': datetime.now().isoformat(),
            'total_products': len(df),
            'unique_brands': df['brand'].nunique(),
            'platforms': df['platform'].value_counts().to_dict() if 'platform' in df.columns else {},
            'categories': df['subcategory'].value_counts().to_dict() if 'subcategory' in df.columns else {},
            'price_range_vnd': {
                'min': float(df['price_vnd'].min()) if 'price_vnd' in df.columns else 0,
                'max': float(df['price_vnd'].max()) if 'price_vnd' in df.columns else 0,
                'avg': float(df['price_vnd'].mean()) if 'price_vnd' in df.columns else 0
            },
            'data_sources': df['source'].value_counts().to_dict() if 'source' in df.columns else {}
        }

if __name__ == "__main__":
    collector = VietnamElectronicsCollector()

    print("üáªüá≥ VIETNAM ELECTRONICS COLLECTOR")
    print("=" * 50)
    print("Thu th·∫≠p d·ªØ li·ªáu s·∫£n ph·∫©m ƒëi·ªán t·ª≠ t·ª´ c√°c platform Vi·ªát Nam")
    print()

    # Ch·∫°y thu th·∫≠p
    df, summary = collector.collect_all_electronics()

    if df is not None and summary is not None:
        print("‚úÖ THU TH·∫¨P HO√ÄN T·∫§T!")
        print(f"üì± T·ªïng s·∫£n ph·∫©m: {summary['total_products']:,}")
        print(f"üè∑Ô∏è Brands: {summary['unique_brands']}")
        print(f"üí∞ Gi√° trung b√¨nh: {summary['price_range_vnd']['avg']:,.0f} VND")
        print(f"üìÇ D·ªØ li·ªáu l∆∞u t·∫°i: data/vietnam_electronics_fresh/")
        print("=" * 50)
    else:
        print("‚ùå THU TH·∫¨P TH·∫§T B·∫†I!")
        print("Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.")